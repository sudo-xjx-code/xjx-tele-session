package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"html/template"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/gorilla/mux"
	_ "github.com/mattn/go-sqlite3"
	"github.com/zelenin/go-tdlib/client"
)

var (
	tdlibClient *client.Client
)

type FormData struct {
	PhoneNumber string
	Code        string
	Password    string
}

func main() {
	config := client.Config{
		APIID:               "<your_api_id>",
		APIHash:             "<your_api_hash>",
		SystemLanguageCode:  "en",
		DeviceModel:         "Desktop",
		SystemVersion:       "Unknown",
		ApplicationVersion:  "1.0",
		UseFileDatabase:     true,
		UseChatInfoDatabase: true,
		UseMessageDatabase:  true,
		UseSecretChats:      true,
	}

	tdlibClient = client.NewClient(config)

	r := mux.NewRouter()
	r.HandleFunc("/", homeHandler).Methods("GET")
	r.HandleFunc("/send-code", sendCodeHandler).Methods("POST")
	r.HandleFunc("/check-code", checkCodeHandler).Methods("POST")
	r.HandleFunc("/check-password", checkPasswordHandler).Methods("POST")

	fmt.Println("Server is running on http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", r))
}

func homeHandler(w http.ResponseWriter, r *http.Request) {
	tmpl, _ := template.New("home").Parse(`
		<!DOCTYPE html>
		<html>
		<head>
			<title>Telegram Session Exporter</title>
		</head>
		<body>
			<h1>Telegram Session Exporter</h1>
			<form action="/send-code" method="POST">
				<label for="phone">Phone Number:</label>
				<input type="text" id="phone" name="phone">
				<input type="submit" value="Send Code">
			</form>
		</body>
		</html>
	`)
	tmpl.Execute(w, nil)
}

func sendCodeHandler(w http.ResponseWriter, r *http.Request) {
	phoneNumber := r.FormValue("phone")
	phoneNumber = strings.TrimSpace(phoneNumber)

	go func() {
		if err := tdlibClient.Authorize(); err != nil {
			log.Fatalf("Authorization error: %v", err)
		}
	}()

	time.Sleep(2 * time.Second)

	_, err := tdlibClient.SendCode(&client.SetAuthenticationPhoneNumberRequest{
		PhoneNumber: phoneNumber,
	})
	if err != nil {
		http.Error(w, "Failed to send phone number", http.StatusInternalServerError)
		return
	}

	tmpl, _ := template.New("code").Parse(`
		<!DOCTYPE html>
		<html>
		<head>
			<title>Enter Code</title>
		</head>
		<body>
			<h1>Enter the Authentication Code</h1>
			<form action="/check-code" method="POST">
				<label for="code">Code:</label>
				<input type="text" id="code" name="code">
				<input type="hidden" name="phone" value="{{.}}">
				<input type="submit" value="Check Code">
			</form>
		</body>
		</html>
	`)
	tmpl.Execute(w, phoneNumber)
}

func checkCodeHandler(w http.ResponseWriter, r *http.Request) {
	code := r.FormValue("code")
	phoneNumber := r.FormValue("phone")

	_, err := tdlibClient.CheckAuthenticationCode(&client.CheckAuthenticationCodeRequest{
		Code: code,
	})
	if err != nil {
		http.Error(w, "Failed to check authentication code", http.StatusInternalServerError)
		return
	}

	currentState, err := tdlibClient.AuthorizeState()
	if err != nil {
		http.Error(w, "Failed to get authorization state", http.StatusInternalServerError)
		return
	}

	if currentState.GetAuthorizationStateEnum() == client.AuthorizationStateWaitPasswordType {
		tmpl, _ := template.New("password").Parse(`
			<!DOCTYPE html>
			<html>
			<head>
				<title>Enter Password</title>
			</head>
			<body>
				<h1>Enter Your Password</h1>
				<form action="/check-password" method="POST">
					<label for="password">Password:</label>
					<input type="password" id="password" name="password">
					<input type="hidden" name="phone" value="{{.}}">
					<input type="submit" value="Check Password">
				</form>
			</body>
			</html>
		`)
		tmpl.Execute(w, phoneNumber)
		return
	}

	exportSession(phoneNumber, w)
}

func checkPasswordHandler(w http.ResponseWriter, r *http.Request) {
	password := r.FormValue("password")
	phoneNumber := r.FormValue("phone")

	_, err := tdlibClient.CheckAuthenticationPassword(&client.CheckAuthenticationPasswordRequest{
		Password: password,
	})
	if err != nil {
		http.Error(w, "Failed to check authentication password", http.StatusInternalServerError)
		return
	}

	exportSession(phoneNumber, w)
}

func exportSession(phoneNumber string, w http.ResponseWriter) {
	exportSessionRequest := &client.GetAuthorizationStateRequest{}
	session, err := tdlibClient.GetAuthorizationState(exportSessionRequest)
	if err != nil {
		http.Error(w, "Failed to export session", http.StatusInternalServerError)
		return
	}

	// Save session to a JSON file
	sessionJSON, err := json.Marshal(session)
	if err != nil {
		http.Error(w, "Failed to marshal session data to JSON", http.StatusInternalServerError)
		return
	}

	jsonFilename := fmt.Sprintf("session_%s.json", phoneNumber)
	file, err := os.Create(jsonFilename)
	if err != nil {
		http.Error(w, "Failed to create session JSON file", http.StatusInternalServerError)
		return
	}
	defer file.Close()

	_, err = file.Write(sessionJSON)
	if err != nil {
		http.Error(w, "Failed to write session data to JSON file", http.StatusInternalServerError)
		return
	}

	// Save session to SQLite database
	db, err := sql.Open("sqlite3", fmt.Sprintf("session_%s.db", phoneNumber))
	if err != nil {
		http.Error(w, "Failed to open SQLite database", http.StatusInternalServerError)
		return
	}
	defer db.Close()

	_, err = db.Exec(`CREATE TABLE IF NOT EXISTS session (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		data TEXT
	)`)
	if err != nil {
		http.Error(w, "Failed to create session table", http.StatusInternalServerError)
		return
	}

	_, err = db.Exec(`INSERT INTO session (data) VALUES (?)`, string(sessionJSON))
	if err != nil {
		http.Error(w, "Failed to insert session data into SQLite database", http.StatusInternalServerError)
		return
	}

	fmt.Fprintf(w, "Session exported to JSON file: %s and SQLite database: session_%s.db\n", jsonFilename, phoneNumber)
}
